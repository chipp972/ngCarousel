#!/usr/bin/env node

const http = require('http')
const getApp = require('../app')

getApp()
.then((app) => {
  let port = normalizePort(normalizePort(9000))
  app.set('port', port)

  // Create HTTP server
  let server = http.createServer(app)

  // Listen on provided port, on all network interfaces.
  server.listen(port)

  // Handle server errors
  server.on('error', (err) => {
    if (err.syscal !== 'listen') {
      console.error(err)
      throw err
    }

    let bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

    switch (err.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`)
        process.exit(1)
        break
      case 'EADDRINUSE':
        console.error(`${bind} is already in use`)
        process.exit(1)
        break
      default:
        console.error(err)
        throw err
    }
  })

  server.on('listening', () => {
    let addr = server.address()
    let bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
    console.log(`Server Listening on ${bind}`)
  })
}) // end of getApp
.catch((err) => {
  console.error(err)
  throw err
})

// Normalize a port into a number, string, or false.
function normalizePort (val) {
  let port = parseInt(val, 10)
  if (isNaN(port)) {
    return val
  }
  if (port >= 0) {
    return port
  }
  return false
}
